import argparse
from Bio import Entrez, SeqIO
import os
import urllib.request

# command line parsing
def get_options():

    parser = argparse.ArgumentParser(description='Download genomes using accession numbers from NCBI')

    # input options
    parser.add_argument('--infile', help='Path to tokenised genome file generated by WTBcluster (required)',
                                    required=True)
    parser.add_argument('--outdir', help='Output directory',
                                    required = True)
    parser.add_argument('--email', help='Email for access to NCBI',
                                    required = True)       
    parser.add_argument('--API-key', help='API key for access to NCBI',
                                    default=None,
                                    type=str)                           
    parser.add_argument('--db', help='Database to download from. Default="assembly',
                                    default="assembly",
                                    type=str)     
    return parser.parse_args()

def main():

    # Check input ok
    args = get_options()

    Entrez.email = args.email

    if args.API_key != None:
        Entrez.api_key = args.API_key

    accessions = []
    with open(args.infile, "r") as f:
        accessions = f.readlines()
    
    accessions = [x.rstrip() for x in accessions]

    for acc in accessions:
        # Search assembly database
        search = Entrez.esearch(db="assembly", term=acc)
        uid = Entrez.read(search)["IdList"][0]

        # Fetch summary
        summary = Entrez.esummary(db=args.db, id=uid, report="full")
        docsum = Entrez.read(summary)
        doc = docsum['DocumentSummarySet']['DocumentSummary'][0]

        # Get GenBank FTP path
        ftp_path = doc['FtpPath_GenBank']
        if not ftp_path:
            print(f"No GenBank path found for {acc}")
            continue

        # Construct FASTA file URL
        basename = os.path.basename(ftp_path)
        fasta_url = f"{ftp_path}/{basename}_genomic.fna.gz"

        # Download
        outpath = os.path.join(args.outdir, f"{basename}.fna.gz")
        print(f"Downloading {fasta_url} -> {outpath}")
        urllib.request.urlretrieve(fasta_url, outpath)

if __name__ == "__main__":
    main()