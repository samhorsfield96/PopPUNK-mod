import argparse
from collections import defaultdict
import statistics

# command line parsing
def get_options():

    parser = argparse.ArgumentParser(description='Using output from WTBcluster, calculate pangenome statistics')

    # input options
    parser.add_argument('--infile', help='Path to tokenised genome file generated by WTBcluster (required)',
                                    required=True)
    parser.add_argument('--core', help='Core gene frequency threshold (default = 0.95)',
                                    type=float,
                                    default=0.95)
    parser.add_argument('--output', help='Name of output file',
                                    required = True)

    return parser.parse_args()

def main():

    # Check input ok
    args = get_options()

    # hold statistics
    num_genomes = 0
    gene_counts = defaultdict(int)
    genome_size_counts = []

    # read input file
    with open(args.infile, "r") as f:
        while True:
            line = f.readline()
            if not line:
                break

            num_genomes += 1
            # get genome tokens
            token_list = line.strip().split("\t")[-1].split(" ")
            #print(token_list)

            # get absolute tokens, ignore paralogs
            token_set = set(abs(int(x)) for x in token_list if x != "_")
            #print(token_set)

            # get number of genes found in genome
            genome_size_counts.append(len(token_set))

            # count genes in genome
            for token in token_set:
                gene_counts[token] += 1
    
    # get pangenome statistics
    pangenome_size = len(gene_counts)
    #print(pangenome_size)

    # count core genes
    core_threshold = num_genomes * args.core
    num_core = 0
    for key, entry in gene_counts.items():
        if entry >= core_threshold:
            num_core += 1
    #print(num_core)

    # get average genome size in terms of genes
    avg_genome_size = statistics.mean([(x / pangenome_size) for x in genome_size_counts])
    #print(avg_genome_size)

    # print summary file
    with open(args.output, "w") as o:
        o.write(f"pan_genes\t{pangenome_size}\ncore_genes\t{num_core}\navg_gene_freq\t{avg_genome_size}")

if __name__ == "__main__":
    main()

    