#!/usr/bin/env python
# vim: set fileencoding=<utf-8> :
# Copyright 2024 John Lees, Nick Croucher and Samuel Horsfield

import pickle
import sys, os
import numpy as np
import argparse

# command line parsing
def get_options():

    parser = argparse.ArgumentParser(description='Extract tab-separated file of distances from pkl and npy files', prog='extract_distances')

    # input options
    parser.add_argument('--distances', help='Path to dists.npy file generated by PopPUNK (required)',
                                    required=True)
    parser.add_argument('--total', help='Number of distances to return. Default = 100000',
                                    type=int,
                                    default=100000)
    parser.add_argument('--output', help='Name of output file',
                                    required = True)

    return parser.parse_args()

def listDistInts(refSeqs, querySeqs, self=True):
    """Gets the ref and query ID for each row of the distance matrix

    Returns an iterable with ref and query ID pairs by row.

    Args:
        refSeqs (list)
            List of reference sequence names.
        querySeqs (list)
            List of query sequence names.
        self (bool)
            Whether a self-comparison, used when constructing a database.
            Requires refSeqs == querySeqs
            Default is True
    Returns:
        ref, query (str, str)
            Iterable of tuples with ref and query names for each distMat row.
    """
    num_ref = len(refSeqs)
    num_query = len(querySeqs)
    if self:
        if refSeqs != querySeqs:
            raise RuntimeError('refSeqs must equal querySeqs for db building (self = true)')
        for i in range(num_ref):
            for j in range(i + 1, num_ref):
                yield(j, i)
    else:
        comparisons = [(0,0)] * (len(refSeqs) * len(querySeqs))
        for i in range(num_query):
            for j in range(num_ref):
                yield(j, i)

def isolateNameToLabel(names):
    """Function to process isolate names to labels
    appropriate for visualisation.

    Args:
        names (list)
            List of isolate names.
    Returns:
        labels (list)
            List of isolate labels.
    """
    # useful to have as a function in case we
    # want to remove certain characters
    labels = [os.path.splitext(os.path.basename(name))[0] for name in names]
    return labels

# main code
if __name__ == "__main__":

    # Check input ok
    args = get_options()

    # Load matrix
    X = np.load(args.distances)
    #print(X)
    num_rows, num_cols = X.shape

    #randomly generate indices to sample from
    samples_index = np.random.choice(num_rows, size=args.total, replace=False)

    # sample from array
    X_sample = X[samples_index]
    #print(X_sample)

    # open output file
    with open(args.output, 'w') as oFile:
        # Write header of output file
        oFile.write("\t".join(['Core', 'Accessory']))
        oFile.write("\n")
        # Write distances
        for i in range(X_sample.shape[0]):
            oFile.write("\t".join([str(X_sample[i,0]), str(X_sample[i,1])]))
            oFile.write("\n")